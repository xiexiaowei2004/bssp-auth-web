<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>net.xiaochengxu</groupId>
  <artifactId>bssp-auth-web</artifactId>
  <packaging>war</packaging>
  <version>1.0.0-SNAPSHOT</version>
  <name>bssp-auth-web Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <!-- 主要依赖库的版本定义：描述了这个项目构建环境中的前提条件 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 定义资源文件的编码格式 -->
		
		<!-- main version setting -->
		<junit.version>4.12</junit.version>		
		<spring.version>4.2.5.RELEASE</spring.version>
		<mybatis.version>3.4.4</mybatis.version>
		<mysql.driver.version>6.0.5</mysql.driver.version>
		<druid.version>1.0.26</druid.version>
		<shiro.version>1.3.2</shiro.version>
		<sitemesh.version>3.0.1</sitemesh.version>
		<ehcache.version>3.1.3</ehcache.version>
		
		<!-- tools version setting -->
		<quartz.version>2.2.3</quartz.version>
		<jackson.version>2.8.4</jackson.version>
		<fastjson.version>1.2.20</fastjson.version>
        <log4j2.version>2.7</log4j2.version>
     	<slf4j.version>1.7.21</slf4j.version>
     	<commons-io.version>2.4</commons-io.version>
		<commons-fileupload.version>1.3.1</commons-fileupload.version>
		<mybatis-spring.version>1.3.0</mybatis-spring.version>
        <mybaitsplus.version>2.0.7</mybaitsplus.version>
		<poi.version>3.9</poi.version>
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<dozer.version>5.5.1</dozer.version>
		
		<!-- environment setting -->
		<jdk.version>1.8</jdk.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

	</properties>
	
	<!-- 设定主仓库，按设定顺序进行查找。 -->
	<repositories>
		<repository>
		    <id>nexus-aliyun</id>
		    <name>Nexus aliyun</name>
		    <layout>default</layout>
		    <url>http://maven.aliyun.com/nexus/content/groups/public</url>
		    <snapshots>
		        <enabled>false</enabled>
		    </snapshots>
		    <releases>
		        <enabled>true</enabled>
		    </releases>
		</repository>
	</repositories>
	
	<!-- 设定插件仓库 -->
	<pluginRepositories> 
		<pluginRepository>
			<id>nexus-aliyun</id>
			<name>Nexus aliyun</name>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
		</pluginRepository>
	</pluginRepositories> 
	

	<!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 -->
	<dependencies>

		<!-- 1.TEST:单元测试框架 begin -->
		<dependency>
			<groupId>junit</groupId>         <!--依赖的group ID -->
			<artifactId>junit</artifactId>   <!--依赖的artifact ID -->
			<version>${junit.version}</version> 	<!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
			<scope>test</scope>			   <!-- 依赖项的适用范围：test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 -->
		</dependency>
		<!-- TEST end -->
		
		<!-- 2.SPRING相关依赖  begin-->
		<!-- ①.spring核心依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId><!-- 包含Spring框架基本的核心工具类 -->
			<version>${spring.version}</version>
		</dependency>
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-beans</artifactId><!-- springIoC（依赖注入）的基础实现 -->
	        <version>${spring.version}</version>
	    </dependency>
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context</artifactId><!-- spring 提供在基础 IoC 功能上的扩展服务 -->
	        <version>${spring.version}</version>
	    </dependency>
	    
	    <!-- ②.spring 持久层依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId><!-- 封装了spring对于事物的控制  -->
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId><!-- 包含对Spring对JDBC数据访问进行封装的所有类  -->
			<version>${spring.version}</version>
		</dependency>
		
		<!-- ③.spring web相关依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId><!-- 包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入 WebApplicationContext 特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类 -->
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId><!-- Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架 -->
			<version>${spring.version}</version>
		</dependency>
		
		<!-- ④.spring test依赖-->		
		<dependency>
			<groupId>org.springframework</groupId><!-- 与Junit单元测试、集成测试 -->
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<!-- ⑤.spring 其它依赖 -->
		<dependency>
			<groupId>org.springframework</groupId><!-- spring面向切面编程，提供AOP（面向切面编程） -->
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		<!-- SPRING相关依赖  end-->
		
		<!-- 3.SERVLET WEB begin -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId><!-- j2ee web spec -->
		    <version>4.0.0-b01</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId><!-- JSTL标签类 -->
			<version>1.2</version>
		</dependency>
		<!-- google java lib -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId><!-- 格式化对象，方便输出日志 -->
			<version>${fastjson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.4</version>
		</dependency>
		<!-- SERVLET WEB end -->

		<!-- 4.MYBATIS 持久层框架 begin --> 
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId> 
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis-spring.version}</version>
		</dependency>
		<!-- MYBATIS 持久层框架 end  -->
		
		<!-- 5.MYSQL 数据库相关依赖 begin -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId><!-- 导入Mysql数据库驱动包 -->
			<version>${mysql.driver.version}</version>
		</dependency>
		<dependency>
		     <groupId>com.alibaba</groupId>
		     <artifactId>druid</artifactId><!-- connection pool:数据库连接池,用来在spingMVC-mybatis.xml中配置数据库  -->
		     <version>${druid.version}</version>
		</dependency>
		<!-- MYSQL 数据库相关依赖 end -->
		
		<!-- 6.LOG 日志相关依赖 begin -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId><!--核心log4j2jar包-->  
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId><!--用于与slf4j保持桥接--> 
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId><!-- slf4j -->
			<version>${slf4j.version}</version>
		</dependency>
		<!-- LOG 日志相关依赖 end -->
		
		<!-- 安全框架SECURITY:shiro begin -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>${shiro.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-ehcache</artifactId>
			<version>${shiro.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>			
		</dependency>
		<!-- 安全框架SECURITY:shiro end -->
		
		<!-- ehcache:缓存框架 begin -->
	    <dependency>
	      <groupId>org.ehcache</groupId>
	      <artifactId>ehcache</artifactId>
	      <version>${ehcache.version}</version>
	    </dependency>
		<!-- ehcache:缓存框架 end -->
		
		<!-- spring 定时:Quartz 时间配置详解 -->
		<dependency>
		    <groupId>org.quartz-scheduler</groupId>
		    <artifactId>quartz</artifactId>
		    <version>${quartz.version}</version>
		</dependency>
		
		<!-- 验证码工具 -->
		<dependency>
		    <groupId>com.github.penggle</groupId>
		    <artifactId>kaptcha</artifactId>
		    <version>2.3.2</version>
		</dependency>
		
		<!-- 获取User Agent用户代理:解析客户端操作系统、浏览器等 -->
		<dependency>
		    <groupId>eu.bitwalker</groupId>
		    <artifactId>UserAgentUtils</artifactId>
		    <version>1.20</version>
		</dependency>
        <!-- 上传组件包 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${commons-fileupload.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>

		<!-- 加密工具 -->
		<dependency>
		    <groupId>org.bouncycastle</groupId>
		    <artifactId>bcprov-jdk15on</artifactId>
		    <version>1.55</version>
		</dependency>
	    <dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.10</version>
		</dependency>
 
		<!-- mail -->
		<dependency>
		    <groupId>javax.mail</groupId>
		    <artifactId>mail</artifactId>
		    <version>1.5.0-b01</version>
		</dependency>
		<dependency>
		    <groupId>javax.activation</groupId>
		    <artifactId>activation</artifactId>
		    <version>1.1.1</version>
		</dependency>
		
		<!-- 使用Velocity 模板引擎快速生成代码 -->
		<dependency>
		    <groupId>org.apache.velocity</groupId>
		    <artifactId>velocity</artifactId>
		    <version>1.7</version>
		</dependency>
		
		<!-- 网页布局和修饰的框架包 -->	
		<dependency>
		    <groupId>org.sitemesh</groupId>
		    <artifactId>sitemesh</artifactId>
		    <version>${sitemesh.version}</version>
		</dependency>
		
		<!-- mybatis 代码自动生成器 -->
		<dependency>
		    <groupId>org.mybatis.generator</groupId>
		    <artifactId>mybatis-generator-core</artifactId>
		    <version>1.3.5</version>
		</dependency> 
		
		<!-- mybatis-plus Mybatis增强辅助工具-->
		<dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus</artifactId>
            <version>${mybaitsplus.version}</version>
        </dependency>
        
        <!-- poi office -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>${poi.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml-schemas</artifactId>
			<version>${poi.version}</version>
		</dependency>
		
		<!-- CKFinder begin -->
		<!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
		<dependency>
		    <groupId>net.coobird</groupId>
		    <artifactId>thumbnailator</artifactId>
		    <version>0.4.8</version>
		</dependency>
		<dependency>
		    <groupId>fakepath</groupId>
		    <artifactId>apache-ant-zip</artifactId>
		    <version>2.3</version>
		</dependency>
		<dependency>
			<groupId>fakepath</groupId>
			<artifactId>ckfinder</artifactId>
			<version>2.3</version>
		</dependency>
		<dependency>
			<groupId>fakepath</groupId>
			<artifactId>ckfinderplugin-fileeditor</artifactId>
			<version>2.3</version>
		</dependency>
		<dependency>
			<groupId>fakepath</groupId>
			<artifactId>ckfinderplugin-imageresize</artifactId>
			<version>2.3</version>
		</dependency>
		<!-- CKFinder end -->
		
		<!-- pojo copy -->
		<dependency>
			<groupId>net.sf.dozer</groupId>
			<artifactId>dozer</artifactId>
			<version>${dozer.version}</version>
		</dependency>
		
		<!-- jackson json -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		
		<!-- 条形码、二维码生成  -->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>2.2</version>
		</dependency>
		
		<!-- jackson -->
		<!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-jaxrs -->
		<dependency>
		    <groupId>org.codehaus.jackson</groupId>
		    <artifactId>jackson-jaxrs</artifactId>
		    <version>1.9.13</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.8.9</version>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.9</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.thetransactioncompany/cors-filter -->
		<dependency>
			<groupId>com.thetransactioncompany</groupId>
			<artifactId>cors-filter</artifactId>
			<version>1.7.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.thetransactioncompany/java-property-utils -->
		<dependency>
			<groupId>com.thetransactioncompany</groupId>
			<artifactId>java-property-utils</artifactId>
			<version>1.9.1</version>
		</dependency>

	</dependencies>
 
  <!--构建项目需要的信息-->  
  <build>
     <finalName>bssp-auth-web</finalName>    <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->
        <plugins>  
        	<!-- maven-compiler-plugin: 编译插件(maven-compiler-plugin用来编译Java代码) -->
            <plugin>  
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-compiler-plugin</artifactId>  
                <version>3.6.0</version>
                <configuration>  
                    <source>${jdk.version}</source>  <!-- 源代码使用的开发版本 -->
                    <target>${jdk.version}</target>  <!-- 需要生成的目标class文件的编译版本 -->
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <encoding>${project.build.sourceEncoding}</encoding> 
                </configuration>  
            </plugin> 
            
            <!-- maven-assembly-plugin：处理资源
            (maven-resources-plugin则用来处理资源文件。默认的主资源文件目录是src/main/resources，很多用户会需要添加额外的资源文件目录，这个时候就可以通过配置maven-resources-plugin来实现。) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin> 
        </plugins> 
  </build>
</project>
